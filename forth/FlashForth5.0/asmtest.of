\ *********************************************************************
\    Filename:      asmtest.of                                        *
\    Date:          30.11.2020                                        *
\    MCU:           ATmega328P                                        *
\    Copyright:     bitflipser                                        *
\    Author:        bitflipser                                        *
\                                                                     *
\    original:      asmtest.txt                                       *
\    Date:          ??.??.????                                        *
\    MCU:           ATmega                                            *
\    Copyright:     Mikael Nordman                                    *
\    Author:        Mikael Nordman                                    *
\ *********************************************************************
\ OptiForth is MIT licensed                                           *
\ *********************************************************************
\ Some tests for the Atmega assembler
\ needs the assembler and see
\ modified to meet OptiForth
-asmtest
marker -asmtest
: asmtest ( n1 n2 -- ) 
  = if ." OK" else ." ERROR" then cr ;

#30 #28 mov, 
ihere 2- @ $2fec asmtest  \ Rd,Rr:

#17 #15 ldi, 
ihere 2- @ $e01f asmtest  \ Rd,k:

#17 $1234 lds, 
ihere 4 - @+ u. @ u. \ Rd: 9110 1234:

\ $09 constant Y+
9 Y+ $31 ldd,
ihere 2 - @ $a899 asmtest

\ $01 constant Z+
9 Z+ $31 ldd,
ihere 2 - @ $a891 asmtest

\ Leave true flag if zero flag is true
: testif0
  [ sez,    ] \ Set zero flag
  [ eq, if, ] \ if zero
      true
  [ else, ]   \ else not zero
      false
  [ then, ]
;
testif0 .

\ Leave true flag if zero flag is false
: testif1 
  [ clz,    ]      \ Clear zero flag
  [ eq, not, if, ] \ if not zero
      true
  [ else, ]        \ else zero 
      false
  [ then, ]
;
testif1 .

\ Increment 24 bit value until result is zero
: testuntil
  ticks
  [ #16 #0 ldi, ]
  [ #17 #0 ldi, ]
  [ #26 #1 ldi, ]
  [ begin, ]
  [   #16 #4 add, ] \ R4 contains 1 (changed in OptiForth)
  [   #17 #5 adc, ] \ R5 contains 0 (changed in OptiForth)
  [   #26 #5 adc, ] \ use R26 to match OptiForth
  [ eq, until, ]    \ until R26 is zero
  ticks=
;
testuntil
